{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mini-Project: Data Wrangling and Transformation with Pandas\n",
    "\n",
    "Working with tabular data is a necessity for anyone with enterprises having a majority of their data in relational databases and flat files. This mini-project is adopted from the excellent tutorial on pandas by Brandon Rhodes which you have watched earlier in the Data Wrangling Unit. In this mini-project, we will be looking at some interesting data based on movie data from the IMDB.\n",
    "\n",
    "This assignment should help you reinforce the concepts you learnt in the curriculum for Data Wrangling and sharpen your skills in using Pandas. Good Luck!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Please make sure you have one of the more recent versions of Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.0.5'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.__version__\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taking a look at the Movies dataset\n",
    "This data shows the movies based on their title and the year of release"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 244914 entries, 0 to 244913\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count   Dtype \n",
      "---  ------  --------------   ----- \n",
      " 0   title   244914 non-null  object\n",
      " 1   year    244914 non-null  int64 \n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 3.7+ MB\n"
     ]
    }
   ],
   "source": [
    "movies = pd.read_csv('titles.csv')\n",
    "movies.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Ticket to the Life</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Parallel Worlds: A New Rock Music Experience</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Morita - La hija de Jesus</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gun</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Love or Nothing at All</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          title  year\n",
       "0                        The Ticket to the Life  2009\n",
       "1  Parallel Worlds: A New Rock Music Experience  2016\n",
       "2                     Morita - La hija de Jesus  2008\n",
       "3                                           Gun  2017\n",
       "4                        Love or Nothing at All  2014"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movies.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taking a look at the Cast dataset\n",
    "\n",
    "This data shows the cast (actors, actresses, supporting roles) for each movie\n",
    "\n",
    "- The attribute `n` basically tells the importance of the cast role, lower the number, more important the role.\n",
    "- Supporting cast usually don't have any value for `n`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3786176 entries, 0 to 3786175\n",
      "Data columns (total 6 columns):\n",
      " #   Column     Dtype  \n",
      "---  ------     -----  \n",
      " 0   title      object \n",
      " 1   year       int64  \n",
      " 2   name       object \n",
      " 3   type       object \n",
      " 4   character  object \n",
      " 5   n          float64\n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 173.3+ MB\n"
     ]
    }
   ],
   "source": [
    "cast = pd.read_csv('cast.csv')\n",
    "cast.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suuri illusioni</td>\n",
       "      <td>1985</td>\n",
       "      <td>Homo $</td>\n",
       "      <td>actor</td>\n",
       "      <td>Guests</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Battle of the Sexes</td>\n",
       "      <td>2017</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Bobby Riggs Fan</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Secret in Their Eyes</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>2002 Dodger Fan</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Steve Jobs</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>1988 Opera House Patron</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Straight Outta Compton</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Club Patron</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Straight Outta Compton</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Dopeman</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>For Thy Love 2</td>\n",
       "      <td>2009</td>\n",
       "      <td>Bee Moe $lim</td>\n",
       "      <td>actor</td>\n",
       "      <td>Thug 1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lapis, Ballpen at Diploma, a True to Life Journey</td>\n",
       "      <td>2014</td>\n",
       "      <td>Jori ' Danilo' Jurado Jr.</td>\n",
       "      <td>actor</td>\n",
       "      <td>Jaime (young)</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Desire (III)</td>\n",
       "      <td>2014</td>\n",
       "      <td>Syaiful 'Ariffin</td>\n",
       "      <td>actor</td>\n",
       "      <td>Actor Playing Eteocles from 'Antigone'</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  year  \\\n",
       "0                                     Closet Monster  2015   \n",
       "1                                    Suuri illusioni  1985   \n",
       "2                                Battle of the Sexes  2017   \n",
       "3                               Secret in Their Eyes  2015   \n",
       "4                                         Steve Jobs  2015   \n",
       "5                             Straight Outta Compton  2015   \n",
       "6                             Straight Outta Compton  2015   \n",
       "7                                     For Thy Love 2  2009   \n",
       "8  Lapis, Ballpen at Diploma, a True to Life Journey  2014   \n",
       "9                                       Desire (III)  2014   \n",
       "\n",
       "                        name   type                               character  \\\n",
       "0                   Buffy #1  actor                                 Buffy 4   \n",
       "1                     Homo $  actor                                  Guests   \n",
       "2                    $hutter  actor                         Bobby Riggs Fan   \n",
       "3                    $hutter  actor                         2002 Dodger Fan   \n",
       "4                    $hutter  actor                 1988 Opera House Patron   \n",
       "5                    $hutter  actor                             Club Patron   \n",
       "6                    $hutter  actor                                 Dopeman   \n",
       "7               Bee Moe $lim  actor                                  Thug 1   \n",
       "8  Jori ' Danilo' Jurado Jr.  actor                           Jaime (young)   \n",
       "9           Syaiful 'Ariffin  actor  Actor Playing Eteocles from 'Antigone'   \n",
       "\n",
       "      n  \n",
       "0  31.0  \n",
       "1  22.0  \n",
       "2  10.0  \n",
       "3   NaN  \n",
       "4   NaN  \n",
       "5   NaN  \n",
       "6   NaN  \n",
       "7   NaN  \n",
       "8   9.0  \n",
       "9   NaN  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Taking a look at the Release dataset\n",
    "\n",
    "This data shows details of when each movie was release in each country with the release date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 479488 entries, 0 to 479487\n",
      "Data columns (total 4 columns):\n",
      " #   Column   Non-Null Count   Dtype         \n",
      "---  ------   --------------   -----         \n",
      " 0   title    479488 non-null  object        \n",
      " 1   year     479488 non-null  int64         \n",
      " 2   country  479488 non-null  object        \n",
      " 3   date     479488 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](1), int64(1), object(2)\n",
      "memory usage: 14.6+ MB\n"
     ]
    }
   ],
   "source": [
    "release_dates = pd.read_csv('release_dates.csv', parse_dates=['date'])\n",
    "release_dates.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>country</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#73, Shaanthi Nivaasa</td>\n",
       "      <td>2007</td>\n",
       "      <td>India</td>\n",
       "      <td>2007-06-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>#BKKY</td>\n",
       "      <td>2016</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>2017-10-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>#Beings</td>\n",
       "      <td>2015</td>\n",
       "      <td>Romania</td>\n",
       "      <td>2015-01-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>#Captured</td>\n",
       "      <td>2017</td>\n",
       "      <td>USA</td>\n",
       "      <td>2017-09-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>#Ewankosau saranghaeyo</td>\n",
       "      <td>2015</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>2015-01-21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    title  year      country       date\n",
       "0   #73, Shaanthi Nivaasa  2007        India 2007-06-15\n",
       "1                   #BKKY  2016     Cambodia 2017-10-12\n",
       "2                 #Beings  2015      Romania 2015-01-29\n",
       "3               #Captured  2017          USA 2017-09-05\n",
       "4  #Ewankosau saranghaeyo  2015  Philippines 2015-01-21"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "release_dates.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section I - Basic Querying, Filtering and Transformations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is the total number of movies?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "244914"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List all Batman movies ever made"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Batman Movies: 2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>52734</th>\n",
       "      <td>Batman</td>\n",
       "      <td>1943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150621</th>\n",
       "      <td>Batman</td>\n",
       "      <td>1989</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         title  year\n",
       "52734   Batman  1943\n",
       "150621  Batman  1989"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batman_df = movies[movies.title == 'Batman']\n",
    "print('Total Batman Movies:', len(batman_df))\n",
    "batman_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List all Batman movies ever made - the right approach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Batman Movies: 35\n"
     ]
    }
   ],
   "source": [
    "batman_df = movies[movies.title.str.contains('Batman', case=False)]\n",
    "print('Total Batman Movies:', len(batman_df))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Display the top 15 Batman movies in the order they were released"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>52734</th>\n",
       "      <td>Batman</td>\n",
       "      <td>1943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100056</th>\n",
       "      <td>Batman and Robin</td>\n",
       "      <td>1949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161439</th>\n",
       "      <td>Batman Dracula</td>\n",
       "      <td>1964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84327</th>\n",
       "      <td>Alyas Batman at Robin</td>\n",
       "      <td>1965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68364</th>\n",
       "      <td>James Batman</td>\n",
       "      <td>1966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161527</th>\n",
       "      <td>Batman: The Movie</td>\n",
       "      <td>1966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56159</th>\n",
       "      <td>Batman Fights Dracula</td>\n",
       "      <td>1967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168504</th>\n",
       "      <td>Fight! Batman, Fight!</td>\n",
       "      <td>1973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150621</th>\n",
       "      <td>Batman</td>\n",
       "      <td>1989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156239</th>\n",
       "      <td>Alyas Batman en Robin</td>\n",
       "      <td>1991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156755</th>\n",
       "      <td>Batman Returns</td>\n",
       "      <td>1992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63366</th>\n",
       "      <td>Batman: Mask of the Phantasm</td>\n",
       "      <td>1993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30236</th>\n",
       "      <td>Batman Forever</td>\n",
       "      <td>1995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46333</th>\n",
       "      <td>Batman &amp; Robin</td>\n",
       "      <td>1997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208220</th>\n",
       "      <td>Batman Begins</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title  year\n",
       "52734                         Batman  1943\n",
       "100056              Batman and Robin  1949\n",
       "161439                Batman Dracula  1964\n",
       "84327          Alyas Batman at Robin  1965\n",
       "68364                   James Batman  1966\n",
       "161527             Batman: The Movie  1966\n",
       "56159          Batman Fights Dracula  1967\n",
       "168504         Fight! Batman, Fight!  1973\n",
       "150621                        Batman  1989\n",
       "156239         Alyas Batman en Robin  1991\n",
       "156755                Batman Returns  1992\n",
       "63366   Batman: Mask of the Phantasm  1993\n",
       "30236                 Batman Forever  1995\n",
       "46333                 Batman & Robin  1997\n",
       "208220                 Batman Begins  2005"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batman_df.sort_values(by=['year'], ascending=True).iloc[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q1 : List all the 'Harry Potter' movies from the most recent to the earliest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>143147</th>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 2</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152831</th>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 1</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109213</th>\n",
       "      <td>Harry Potter and the Half-Blood Prince</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50581</th>\n",
       "      <td>Harry Potter and the Order of the Phoenix</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187926</th>\n",
       "      <td>Harry Potter and the Goblet of Fire</td>\n",
       "      <td>2005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61957</th>\n",
       "      <td>Harry Potter and the Prisoner of Azkaban</td>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82791</th>\n",
       "      <td>Harry Potter and the Chamber of Secrets</td>\n",
       "      <td>2002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223087</th>\n",
       "      <td>Harry Potter and the Sorcerer's Stone</td>\n",
       "      <td>2001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  year\n",
       "143147  Harry Potter and the Deathly Hallows: Part 2  2011\n",
       "152831  Harry Potter and the Deathly Hallows: Part 1  2010\n",
       "109213        Harry Potter and the Half-Blood Prince  2009\n",
       "50581      Harry Potter and the Order of the Phoenix  2007\n",
       "187926           Harry Potter and the Goblet of Fire  2005\n",
       "61957       Harry Potter and the Prisoner of Azkaban  2004\n",
       "82791        Harry Potter and the Chamber of Secrets  2002\n",
       "223087         Harry Potter and the Sorcerer's Stone  2001"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "batman_df = movies[movies.title.str.contains('Harry Potter', case=True)]\n",
    "batman_df.sort_values(by=['year'], ascending=False).iloc[:8]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many movies were made in the year 2017?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11474"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies[movies.year == 2017])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q2 : How many movies were made in the year 2015?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8702"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies[movies.year == 2015])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q3 : How many movies were made from 2000 till 2018?\n",
    "- You can chain multiple conditions using OR (`|`) as well as AND (`&`) depending on the condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Ticket to the Life</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Parallel Worlds: A New Rock Music Experience</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Morita - La hija de Jesus</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gun</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Love or Nothing at All</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244899</th>\n",
       "      <td>Poppy Goes to Hollywood</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244901</th>\n",
       "      <td>Thomson Villa</td>\n",
       "      <td>2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244903</th>\n",
       "      <td>A Mero Hajur 2</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244906</th>\n",
       "      <td>Yin yang lu shi: Xuan yan zhou</td>\n",
       "      <td>2001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244908</th>\n",
       "      <td>Tommy's Honour</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>114070 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  year\n",
       "0                             The Ticket to the Life  2009\n",
       "1       Parallel Worlds: A New Rock Music Experience  2016\n",
       "2                          Morita - La hija de Jesus  2008\n",
       "3                                                Gun  2017\n",
       "4                             Love or Nothing at All  2014\n",
       "...                                              ...   ...\n",
       "244899                       Poppy Goes to Hollywood  2016\n",
       "244901                                 Thomson Villa  2014\n",
       "244903                                A Mero Hajur 2  2017\n",
       "244906                Yin yang lu shi: Xuan yan zhou  2001\n",
       "244908                                Tommy's Honour  2016\n",
       "\n",
       "[114070 rows x 2 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_movies = movies[(movies.year >= 2000) & (movies.year <= 2018)]\n",
    "df_movies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q4: How many movies are titled \"Hamlet\"?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(movies[movies.title.str.contains('Hamlet', case = False)])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q5: List all movies titled \"Hamlet\" \n",
    "- The movies should only have been released on or after the year 2000\n",
    "- Display the movies based on the year they were released (earliest to most recent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78061</th>\n",
       "      <td>100 Years</td>\n",
       "      <td>2115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94972</th>\n",
       "      <td>The Zero Century: Maetel</td>\n",
       "      <td>2026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152082</th>\n",
       "      <td>Avatar 5</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184080</th>\n",
       "      <td>Avatar 4</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153933</th>\n",
       "      <td>The Dreams I Have</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74584</th>\n",
       "      <td>Saamy Kodutha Varam</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25710</th>\n",
       "      <td>Prop og Berta</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127071</th>\n",
       "      <td>Tirumala Tirupathi Venkatesa</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98848</th>\n",
       "      <td>Chudail Ki Raat</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186861</th>\n",
       "      <td>Rani Mera Naam</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>115471 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title  year\n",
       "78061                      100 Years  2115\n",
       "94972       The Zero Century: Maetel  2026\n",
       "152082                      Avatar 5  2025\n",
       "184080                      Avatar 4  2024\n",
       "153933             The Dreams I Have  2024\n",
       "...                              ...   ...\n",
       "74584            Saamy Kodutha Varam  2000\n",
       "25710                  Prop og Berta  2000\n",
       "127071  Tirumala Tirupathi Venkatesa  2000\n",
       "98848                Chudail Ki Raat  2000\n",
       "186861                Rani Mera Naam  2000\n",
       "\n",
       "[115471 rows x 2 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = movies[movies.title.str.contains('Hamlet', case = False)]\n",
    "df = movies[movies.year >=  2000]\n",
    "df= df.sort_values(by=['year'], ascending = False)\n",
    "df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q6: How many roles in the movie \"Inception\" are of the supporting cast (extra credits)\n",
    "- supporting cast are NOT ranked by an \"n\" value (NaN)\n",
    "- check for how to filter based on nulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3786176 entries, 0 to 3786175\n",
      "Data columns (total 6 columns):\n",
      " #   Column     Dtype  \n",
      "---  ------     -----  \n",
      " 0   title      object \n",
      " 1   year       int64  \n",
      " 2   name       object \n",
      " 3   type       object \n",
      " 4   character  object \n",
      " 5   n          float64\n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 173.3+ MB\n"
     ]
    }
   ],
   "source": [
    "new_df = cast.fillna(0)\n",
    "new_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q7: How many roles in the movie \"Inception\" are of the main cast\n",
    "- main cast always have an 'n' value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suuri illusioni</td>\n",
       "      <td>1985</td>\n",
       "      <td>Homo $</td>\n",
       "      <td>actor</td>\n",
       "      <td>Guests</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Battle of the Sexes</td>\n",
       "      <td>2017</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Bobby Riggs Fan</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lapis, Ballpen at Diploma, a True to Life Journey</td>\n",
       "      <td>2014</td>\n",
       "      <td>Jori ' Danilo' Jurado Jr.</td>\n",
       "      <td>actor</td>\n",
       "      <td>Jaime (young)</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>When the Man Went South</td>\n",
       "      <td>2014</td>\n",
       "      <td>Taipaleti 'Atu'ake</td>\n",
       "      <td>actor</td>\n",
       "      <td>Two Palms - Ua'i Paame</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786170</th>\n",
       "      <td>Stuttur Frakki</td>\n",
       "      <td>1993</td>\n",
       "      <td>Sveinbj?rg ??rhallsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Flugfreyja</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786171</th>\n",
       "      <td>Foxtrot</td>\n",
       "      <td>1988</td>\n",
       "      <td>Lilja ??risd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>D?ra</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786172</th>\n",
       "      <td>Niceland (Population. 1.000.002)</td>\n",
       "      <td>2004</td>\n",
       "      <td>Sigr??ur J?na ??risd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Woman in Bus</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786173</th>\n",
       "      <td>Skammdegi</td>\n",
       "      <td>1985</td>\n",
       "      <td>Dalla ??r?ard?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Hj?krunarkona</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786174</th>\n",
       "      <td>U.S.S.S.S...</td>\n",
       "      <td>2003</td>\n",
       "      <td>Krist?n Andrea ??r?ard?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Afgr.dama ? bens?nst??</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2327603 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     title  year  \\\n",
       "0                                           Closet Monster  2015   \n",
       "1                                          Suuri illusioni  1985   \n",
       "2                                      Battle of the Sexes  2017   \n",
       "8        Lapis, Ballpen at Diploma, a True to Life Journey  2014   \n",
       "10                                 When the Man Went South  2014   \n",
       "...                                                    ...   ...   \n",
       "3786170                                     Stuttur Frakki  1993   \n",
       "3786171                                            Foxtrot  1988   \n",
       "3786172                   Niceland (Population. 1.000.002)  2004   \n",
       "3786173                                          Skammdegi  1985   \n",
       "3786174                                       U.S.S.S.S...  2003   \n",
       "\n",
       "                                name     type               character     n  \n",
       "0                           Buffy #1    actor                 Buffy 4  31.0  \n",
       "1                             Homo $    actor                  Guests  22.0  \n",
       "2                            $hutter    actor         Bobby Riggs Fan  10.0  \n",
       "8          Jori ' Danilo' Jurado Jr.    actor           Jaime (young)   9.0  \n",
       "10                Taipaleti 'Atu'ake    actor  Two Palms - Ua'i Paame   8.0  \n",
       "...                              ...      ...                     ...   ...  \n",
       "3786170    Sveinbj?rg ??rhallsd?ttir  actress              Flugfreyja  24.0  \n",
       "3786171            Lilja ??risd?ttir  actress                    D?ra  24.0  \n",
       "3786172    Sigr??ur J?na ??risd?ttir  actress            Woman in Bus  26.0  \n",
       "3786173           Dalla ??r?ard?ttir  actress           Hj?krunarkona   9.0  \n",
       "3786174  Krist?n Andrea ??r?ard?ttir  actress  Afgr.dama ? bens?nst??  17.0  \n",
       "\n",
       "[2327603 rows x 6 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = cast[cast.title.str.contains('Inception', case = False)]\n",
    "df = cast[cast.n>=1]\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q8: Show the top ten cast (actors\\actresses) in the movie \"Inception\" \n",
    "- main cast always have an 'n' value\n",
    "- remember to sort!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2578343</th>\n",
       "      <td>Deep End</td>\n",
       "      <td>1970</td>\n",
       "      <td>Jane Asher</td>\n",
       "      <td>actress</td>\n",
       "      <td>Susan</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580175</th>\n",
       "      <td>The Desperate Hero</td>\n",
       "      <td>1920</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Henry Baird</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580174</th>\n",
       "      <td>The Crimson Gardenia</td>\n",
       "      <td>1919</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Roland Van Dam</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580173</th>\n",
       "      <td>The Chicken in the Case</td>\n",
       "      <td>1921</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Steve Perkins</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580166</th>\n",
       "      <td>Sooner or Later</td>\n",
       "      <td>1920</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Patrick Murphy</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580163</th>\n",
       "      <td>Rolling Stones</td>\n",
       "      <td>1916</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Dave Fulton</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580162</th>\n",
       "      <td>Reported Missing</td>\n",
       "      <td>1922</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Richard Boyd</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580160</th>\n",
       "      <td>Piccadilly Jim</td>\n",
       "      <td>1919</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Piccadilly Jim</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580159</th>\n",
       "      <td>Piccadilly Jim</td>\n",
       "      <td>1919</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>James Braithwaite Crocker</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1580154</th>\n",
       "      <td>Modern Matrimony</td>\n",
       "      <td>1923</td>\n",
       "      <td>Owen Moore</td>\n",
       "      <td>actor</td>\n",
       "      <td>Chester Waddington</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           title  year        name     type  \\\n",
       "2578343                 Deep End  1970  Jane Asher  actress   \n",
       "1580175       The Desperate Hero  1920  Owen Moore    actor   \n",
       "1580174     The Crimson Gardenia  1919  Owen Moore    actor   \n",
       "1580173  The Chicken in the Case  1921  Owen Moore    actor   \n",
       "1580166          Sooner or Later  1920  Owen Moore    actor   \n",
       "1580163           Rolling Stones  1916  Owen Moore    actor   \n",
       "1580162         Reported Missing  1922  Owen Moore    actor   \n",
       "1580160           Piccadilly Jim  1919  Owen Moore    actor   \n",
       "1580159           Piccadilly Jim  1919  Owen Moore    actor   \n",
       "1580154         Modern Matrimony  1923  Owen Moore    actor   \n",
       "\n",
       "                         character    n  \n",
       "2578343                      Susan  1.0  \n",
       "1580175                Henry Baird  1.0  \n",
       "1580174             Roland Van Dam  1.0  \n",
       "1580173              Steve Perkins  1.0  \n",
       "1580166             Patrick Murphy  1.0  \n",
       "1580163                Dave Fulton  1.0  \n",
       "1580162               Richard Boyd  1.0  \n",
       "1580160             Piccadilly Jim  1.0  \n",
       "1580159  James Braithwaite Crocker  1.0  \n",
       "1580154         Chester Waddington  1.0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = cast[cast.title.str.contains('Inception', case = False)]\n",
    "df = cast[cast.n>=1]\n",
    "df1 = df.sort_values(by='n', ascending = True)\n",
    "df1.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q9:\n",
    "\n",
    "(A) List all movies where there was a character 'Albus Dumbledore' \n",
    "\n",
    "(B) Now modify the above to show only the actors who played the character 'Albus Dumbledore'\n",
    "- For Part (B) remember the same actor might play the same role in multiple movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>704984</th>\n",
       "      <td>Epic Movie</td>\n",
       "      <td>2007</td>\n",
       "      <td>Dane Farwell</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792419</th>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 1</td>\n",
       "      <td>2010</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Professor Albus Dumbledore</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792420</th>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 2</td>\n",
       "      <td>2011</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Professor Albus Dumbledore</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792421</th>\n",
       "      <td>Harry Potter and the Goblet of Fire</td>\n",
       "      <td>2005</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792422</th>\n",
       "      <td>Harry Potter and the Half-Blood Prince</td>\n",
       "      <td>2009</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Professor Albus Dumbledore</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792423</th>\n",
       "      <td>Harry Potter and the Order of the Phoenix</td>\n",
       "      <td>2007</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792424</th>\n",
       "      <td>Harry Potter and the Prisoner of Azkaban</td>\n",
       "      <td>2004</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>947789</th>\n",
       "      <td>Harry Potter and the Chamber of Secrets</td>\n",
       "      <td>2002</td>\n",
       "      <td>Richard Harris</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>947790</th>\n",
       "      <td>Harry Potter and the Sorcerer's Stone</td>\n",
       "      <td>2001</td>\n",
       "      <td>Richard Harris</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1685537</th>\n",
       "      <td>Ultimate Hero Project</td>\n",
       "      <td>2013</td>\n",
       "      <td>George (X) O'Connor</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1893421</th>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 1</td>\n",
       "      <td>2010</td>\n",
       "      <td>Toby Regbo</td>\n",
       "      <td>actor</td>\n",
       "      <td>Young Albus Dumbledore</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2248085</th>\n",
       "      <td>Potter</td>\n",
       "      <td>2015</td>\n",
       "      <td>Timothy Tedmanson</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                title  year  \\\n",
       "704984                                     Epic Movie  2007   \n",
       "792419   Harry Potter and the Deathly Hallows: Part 1  2010   \n",
       "792420   Harry Potter and the Deathly Hallows: Part 2  2011   \n",
       "792421            Harry Potter and the Goblet of Fire  2005   \n",
       "792422         Harry Potter and the Half-Blood Prince  2009   \n",
       "792423      Harry Potter and the Order of the Phoenix  2007   \n",
       "792424       Harry Potter and the Prisoner of Azkaban  2004   \n",
       "947789        Harry Potter and the Chamber of Secrets  2002   \n",
       "947790          Harry Potter and the Sorcerer's Stone  2001   \n",
       "1685537                         Ultimate Hero Project  2013   \n",
       "1893421  Harry Potter and the Deathly Hallows: Part 1  2010   \n",
       "2248085                                        Potter  2015   \n",
       "\n",
       "                        name   type                   character     n  \n",
       "704984          Dane Farwell  actor            Albus Dumbledore  17.0  \n",
       "792419        Michael Gambon  actor  Professor Albus Dumbledore  39.0  \n",
       "792420        Michael Gambon  actor  Professor Albus Dumbledore   2.0  \n",
       "792421        Michael Gambon  actor            Albus Dumbledore  37.0  \n",
       "792422        Michael Gambon  actor  Professor Albus Dumbledore   2.0  \n",
       "792423        Michael Gambon  actor            Albus Dumbledore  36.0  \n",
       "792424        Michael Gambon  actor            Albus Dumbledore  27.0  \n",
       "947789        Richard Harris  actor            Albus Dumbledore  32.0  \n",
       "947790        Richard Harris  actor            Albus Dumbledore   1.0  \n",
       "1685537  George (X) O'Connor  actor            Albus Dumbledore   NaN  \n",
       "1893421           Toby Regbo  actor      Young Albus Dumbledore   NaN  \n",
       "2248085    Timothy Tedmanson  actor            Albus Dumbledore   NaN  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = cast[cast.character.str.contains('Albus Dumbledore', case = False)]\n",
    "#df = df[cast.actors]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-24-a2cc1ba5f7c5>:1: UserWarning: Boolean Series key will be reindexed to match DataFrame index.\n",
      "  df = df[cast.character == 'Albus Dumbledore']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>704984</th>\n",
       "      <td>Epic Movie</td>\n",
       "      <td>2007</td>\n",
       "      <td>Dane Farwell</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792421</th>\n",
       "      <td>Harry Potter and the Goblet of Fire</td>\n",
       "      <td>2005</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792423</th>\n",
       "      <td>Harry Potter and the Order of the Phoenix</td>\n",
       "      <td>2007</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>792424</th>\n",
       "      <td>Harry Potter and the Prisoner of Azkaban</td>\n",
       "      <td>2004</td>\n",
       "      <td>Michael Gambon</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>947789</th>\n",
       "      <td>Harry Potter and the Chamber of Secrets</td>\n",
       "      <td>2002</td>\n",
       "      <td>Richard Harris</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>947790</th>\n",
       "      <td>Harry Potter and the Sorcerer's Stone</td>\n",
       "      <td>2001</td>\n",
       "      <td>Richard Harris</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1685537</th>\n",
       "      <td>Ultimate Hero Project</td>\n",
       "      <td>2013</td>\n",
       "      <td>George (X) O'Connor</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2248085</th>\n",
       "      <td>Potter</td>\n",
       "      <td>2015</td>\n",
       "      <td>Timothy Tedmanson</td>\n",
       "      <td>actor</td>\n",
       "      <td>Albus Dumbledore</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             title  year                 name  \\\n",
       "704984                                  Epic Movie  2007         Dane Farwell   \n",
       "792421         Harry Potter and the Goblet of Fire  2005       Michael Gambon   \n",
       "792423   Harry Potter and the Order of the Phoenix  2007       Michael Gambon   \n",
       "792424    Harry Potter and the Prisoner of Azkaban  2004       Michael Gambon   \n",
       "947789     Harry Potter and the Chamber of Secrets  2002       Richard Harris   \n",
       "947790       Harry Potter and the Sorcerer's Stone  2001       Richard Harris   \n",
       "1685537                      Ultimate Hero Project  2013  George (X) O'Connor   \n",
       "2248085                                     Potter  2015    Timothy Tedmanson   \n",
       "\n",
       "          type         character     n  \n",
       "704984   actor  Albus Dumbledore  17.0  \n",
       "792421   actor  Albus Dumbledore  37.0  \n",
       "792423   actor  Albus Dumbledore  36.0  \n",
       "792424   actor  Albus Dumbledore  27.0  \n",
       "947789   actor  Albus Dumbledore  32.0  \n",
       "947790   actor  Albus Dumbledore   1.0  \n",
       "1685537  actor  Albus Dumbledore   NaN  \n",
       "2248085  actor  Albus Dumbledore   NaN  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[cast.character == 'Albus Dumbledore']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q10:\n",
    "\n",
    "(A) How many roles has 'Keanu Reeves' played throughout his career?\n",
    "\n",
    "(B) List the leading roles that 'Keanu Reeves' played on or after 1999 in order by year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "62"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Keanu = cast[cast.name.str.contains('Keanu Reeves', case = False)]\n",
    "\n",
    "len(df_Keanu)\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Alex Wyler',\n",
       " 'Bob Arctor',\n",
       " 'Chevalier Danceny',\n",
       " 'Chris Nadeau',\n",
       " 'Chris Townsend',\n",
       " \"Conor O'Neill\",\n",
       " 'Detective Galban',\n",
       " 'Detective Tom Ludlow',\n",
       " 'Dogstar',\n",
       " 'Don John',\n",
       " 'Donaka Mark',\n",
       " 'Donnie Barksdale',\n",
       " 'Dr. Beckham',\n",
       " 'Eddie Kasalivich',\n",
       " 'Evan',\n",
       " 'Griffin',\n",
       " 'Hank',\n",
       " 'Harry',\n",
       " 'Heaver',\n",
       " 'Henry Torne',\n",
       " 'Himself',\n",
       " 'Jack Traven',\n",
       " 'Jjaks Clayton',\n",
       " 'John',\n",
       " 'John Constantine',\n",
       " 'John Wick',\n",
       " 'Johnny Mnemonic',\n",
       " 'Johnny Utah',\n",
       " 'Jonathan Harker',\n",
       " 'Julian Gitche',\n",
       " 'Julian Mercer',\n",
       " 'Kai',\n",
       " 'Keanu',\n",
       " 'Keanu Reeves',\n",
       " 'Kevin Lomax',\n",
       " 'Klaatu',\n",
       " 'Lucas Hill',\n",
       " 'Marlon',\n",
       " 'Martin Loader',\n",
       " 'Matt',\n",
       " 'Nelson Moss',\n",
       " 'Neo',\n",
       " 'Ortiz the Dog Boy',\n",
       " 'Paul Sutton',\n",
       " 'Perry Lyman',\n",
       " 'Ramsey',\n",
       " 'Ron Petrie',\n",
       " 'Rupert Marshetta',\n",
       " 'Scott Favor',\n",
       " 'Shane Falco',\n",
       " 'Siddhartha',\n",
       " 'Ted',\n",
       " 'The Dream',\n",
       " 'Tod',\n",
       " 'Tommy Warneki',\n",
       " 'Winston Connelly'}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_reeves = set(df_Keanu[df_Keanu.year >= 1999 & (df_Keanu.n == 1.0)]['character'])\n",
    "df_reeves"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q11: \n",
    "\n",
    "(A) List the total number of actor and actress roles available from 1950 - 1960\n",
    "\n",
    "(B) List the total number of actor and actress roles available from 2007 - 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>Fire Down Below</td>\n",
       "      <td>1957</td>\n",
       "      <td>'Stretch' Cox Troupe</td>\n",
       "      <td>actor</td>\n",
       "      <td>Limbo Dance by</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>De zaak M.P.</td>\n",
       "      <td>1960</td>\n",
       "      <td>Frans 't Hoen</td>\n",
       "      <td>actor</td>\n",
       "      <td>Hollandse boer</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>Dorp aan de rivier</td>\n",
       "      <td>1958</td>\n",
       "      <td>Frans 't Hoen</td>\n",
       "      <td>actor</td>\n",
       "      <td>Dirk Jan</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>Ci sposeremo a Capri</td>\n",
       "      <td>1956</td>\n",
       "      <td>Quartetto 2+2</td>\n",
       "      <td>actor</td>\n",
       "      <td>Themselves</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>Thunder in Carolina</td>\n",
       "      <td>1960</td>\n",
       "      <td>2nd Marine Division Band</td>\n",
       "      <td>actor</td>\n",
       "      <td>Themselves</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786059</th>\n",
       "      <td>Styrmand Karlsen</td>\n",
       "      <td>1958</td>\n",
       "      <td>Clara ?st?</td>\n",
       "      <td>actress</td>\n",
       "      <td>The Queen</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786061</th>\n",
       "      <td>Tre piger fra Jylland</td>\n",
       "      <td>1957</td>\n",
       "      <td>Clara ?st?</td>\n",
       "      <td>actress</td>\n",
       "      <td>Frk. Lind</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786075</th>\n",
       "      <td>Toya</td>\n",
       "      <td>1956</td>\n",
       "      <td>Aslaug ?ye</td>\n",
       "      <td>actress</td>\n",
       "      <td>moren til Trygve</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786083</th>\n",
       "      <td>Venner</td>\n",
       "      <td>1960</td>\n",
       "      <td>Bibba ?ygard</td>\n",
       "      <td>actress</td>\n",
       "      <td>Kontordame</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786094</th>\n",
       "      <td>Akdeniz korsanlari</td>\n",
       "      <td>1950</td>\n",
       "      <td>Muazzez ?lkerer</td>\n",
       "      <td>actress</td>\n",
       "      <td>Maria</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>234635 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         title  year                      name     type  \\\n",
       "66             Fire Down Below  1957      'Stretch' Cox Troupe    actor   \n",
       "67                De zaak M.P.  1960             Frans 't Hoen    actor   \n",
       "68          Dorp aan de rivier  1958             Frans 't Hoen    actor   \n",
       "111       Ci sposeremo a Capri  1956             Quartetto 2+2    actor   \n",
       "116        Thunder in Carolina  1960  2nd Marine Division Band    actor   \n",
       "...                        ...   ...                       ...      ...   \n",
       "3786059       Styrmand Karlsen  1958                Clara ?st?  actress   \n",
       "3786061  Tre piger fra Jylland  1957                Clara ?st?  actress   \n",
       "3786075                   Toya  1956                Aslaug ?ye  actress   \n",
       "3786083                 Venner  1960              Bibba ?ygard  actress   \n",
       "3786094     Akdeniz korsanlari  1950           Muazzez ?lkerer  actress   \n",
       "\n",
       "                character     n  \n",
       "66         Limbo Dance by  20.0  \n",
       "67         Hollandse boer  29.0  \n",
       "68               Dirk Jan  15.0  \n",
       "111            Themselves  19.0  \n",
       "116            Themselves   NaN  \n",
       "...                   ...   ...  \n",
       "3786059         The Queen   9.0  \n",
       "3786061         Frk. Lind   9.0  \n",
       "3786075  moren til Trygve  19.0  \n",
       "3786083        Kontordame   NaN  \n",
       "3786094             Maria   2.0  \n",
       "\n",
       "[234635 rows x 6 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_year = cast[(cast.year >= 1950) & (cast.year <= 1960)]\n",
    "#df_year2 = cast[cast.year >= 2007 & (cast.year <= 2017)]\n",
    "\n",
    "df_year\n",
    "#df_year2\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Battle of the Sexes</td>\n",
       "      <td>2017</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Bobby Riggs Fan</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Secret in Their Eyes</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>2002 Dodger Fan</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Steve Jobs</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>1988 Opera House Patron</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Straight Outta Compton</td>\n",
       "      <td>2015</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Club Patron</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786159</th>\n",
       "      <td>Eldfjall</td>\n",
       "      <td>2011</td>\n",
       "      <td>Katla M. ?orgeirsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Home Nurse</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786160</th>\n",
       "      <td>Svanurinn</td>\n",
       "      <td>2017</td>\n",
       "      <td>Katla M. ?orgeirsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>?l?f</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786166</th>\n",
       "      <td>Foreldrar</td>\n",
       "      <td>2007</td>\n",
       "      <td>Lilja Gu?r?n ?orvaldsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Katrin Eldri</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786167</th>\n",
       "      <td>Rokland</td>\n",
       "      <td>2011</td>\n",
       "      <td>Lilja Gu?r?n ?orvaldsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>A?albj?rg - Dagga's Mother</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786168</th>\n",
       "      <td>XL</td>\n",
       "      <td>2013</td>\n",
       "      <td>Lilja Gu?r?n ?orvaldsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Tengdamamma</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1452413 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          title  year                         name     type  \\\n",
       "0                Closet Monster  2015                     Buffy #1    actor   \n",
       "2           Battle of the Sexes  2017                      $hutter    actor   \n",
       "3          Secret in Their Eyes  2015                      $hutter    actor   \n",
       "4                    Steve Jobs  2015                      $hutter    actor   \n",
       "5        Straight Outta Compton  2015                      $hutter    actor   \n",
       "...                         ...   ...                          ...      ...   \n",
       "3786159                Eldfjall  2011      Katla M. ?orgeirsd?ttir  actress   \n",
       "3786160               Svanurinn  2017      Katla M. ?orgeirsd?ttir  actress   \n",
       "3786166               Foreldrar  2007  Lilja Gu?r?n ?orvaldsd?ttir  actress   \n",
       "3786167                 Rokland  2011  Lilja Gu?r?n ?orvaldsd?ttir  actress   \n",
       "3786168                      XL  2013  Lilja Gu?r?n ?orvaldsd?ttir  actress   \n",
       "\n",
       "                          character     n  \n",
       "0                           Buffy 4  31.0  \n",
       "2                   Bobby Riggs Fan  10.0  \n",
       "3                   2002 Dodger Fan   NaN  \n",
       "4           1988 Opera House Patron   NaN  \n",
       "5                       Club Patron   NaN  \n",
       "...                             ...   ...  \n",
       "3786159                  Home Nurse   NaN  \n",
       "3786160                        ?l?f   NaN  \n",
       "3786166                Katrin Eldri   NaN  \n",
       "3786167  A?albj?rg - Dagga's Mother   NaN  \n",
       "3786168                 Tengdamamma   NaN  \n",
       "\n",
       "[1452413 rows x 6 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_year2 = cast[(cast.year >= 2007) & (cast.year <= 2017)]\n",
    "df_year2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section I - Q12: \n",
    "\n",
    "(A) List the total number of leading roles available from 2000 to present\n",
    "\n",
    "(B) List the total number of non-leading roles available from 2000 - present (exclude support cast)\n",
    "\n",
    "(C) List the total number of support\\extra-credit roles available from 2000 - present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Battle of the Sexes</td>\n",
       "      <td>2017</td>\n",
       "      <td>$hutter</td>\n",
       "      <td>actor</td>\n",
       "      <td>Bobby Riggs Fan</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lapis, Ballpen at Diploma, a True to Life Journey</td>\n",
       "      <td>2014</td>\n",
       "      <td>Jori ' Danilo' Jurado Jr.</td>\n",
       "      <td>actor</td>\n",
       "      <td>Jaime (young)</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>When the Man Went South</td>\n",
       "      <td>2014</td>\n",
       "      <td>Taipaleti 'Atu'ake</td>\n",
       "      <td>actor</td>\n",
       "      <td>Two Palms - Ua'i Paame</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Little Angel (Angelita)</td>\n",
       "      <td>2015</td>\n",
       "      <td>Michael 'babeepower' Viera</td>\n",
       "      <td>actor</td>\n",
       "      <td>Chico</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786163</th>\n",
       "      <td>Beowulf &amp; Grendel</td>\n",
       "      <td>2005</td>\n",
       "      <td>Steinunn ?l?na ?orsteinsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Wealtheow</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786164</th>\n",
       "      <td>Eden</td>\n",
       "      <td>2018</td>\n",
       "      <td>Steinunn ?l?na ?orsteinsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>M??ir Viggu</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786169</th>\n",
       "      <td>Niceland (Population. 1.000.002)</td>\n",
       "      <td>2004</td>\n",
       "      <td>Steinunn ?orvaldsd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Factory Worker</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786172</th>\n",
       "      <td>Niceland (Population. 1.000.002)</td>\n",
       "      <td>2004</td>\n",
       "      <td>Sigr??ur J?na ??risd?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Woman in Bus</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786174</th>\n",
       "      <td>U.S.S.S.S...</td>\n",
       "      <td>2003</td>\n",
       "      <td>Krist?n Andrea ??r?ard?ttir</td>\n",
       "      <td>actress</td>\n",
       "      <td>Afgr.dama ? bens?nst??</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1062278 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     title  year  \\\n",
       "0                                           Closet Monster  2015   \n",
       "2                                      Battle of the Sexes  2017   \n",
       "8        Lapis, Ballpen at Diploma, a True to Life Journey  2014   \n",
       "10                                 When the Man Went South  2014   \n",
       "11                                 Little Angel (Angelita)  2015   \n",
       "...                                                    ...   ...   \n",
       "3786163                                  Beowulf & Grendel  2005   \n",
       "3786164                                               Eden  2018   \n",
       "3786169                   Niceland (Population. 1.000.002)  2004   \n",
       "3786172                   Niceland (Population. 1.000.002)  2004   \n",
       "3786174                                       U.S.S.S.S...  2003   \n",
       "\n",
       "                                   name     type               character     n  \n",
       "0                              Buffy #1    actor                 Buffy 4  31.0  \n",
       "2                               $hutter    actor         Bobby Riggs Fan  10.0  \n",
       "8             Jori ' Danilo' Jurado Jr.    actor           Jaime (young)   9.0  \n",
       "10                   Taipaleti 'Atu'ake    actor  Two Palms - Ua'i Paame   8.0  \n",
       "11           Michael 'babeepower' Viera    actor                   Chico   9.0  \n",
       "...                                 ...      ...                     ...   ...  \n",
       "3786163  Steinunn ?l?na ?orsteinsd?ttir  actress               Wealtheow  15.0  \n",
       "3786164  Steinunn ?l?na ?orsteinsd?ttir  actress             M??ir Viggu   8.0  \n",
       "3786169         Steinunn ?orvaldsd?ttir  actress          Factory Worker  21.0  \n",
       "3786172       Sigr??ur J?na ??risd?ttir  actress            Woman in Bus  26.0  \n",
       "3786174     Krist?n Andrea ??r?ard?ttir  actress  Afgr.dama ? bens?nst??  17.0  \n",
       "\n",
       "[1062278 rows x 6 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lead_role = cast[(cast.year >= 2000) & (cast.n >= 1.0)]\n",
    "lead_role"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>Live Freaky Die Freaky</td>\n",
       "      <td>2006</td>\n",
       "      <td>Nick 13</td>\n",
       "      <td>actor</td>\n",
       "      <td>TV Reporter #1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>All Things Fall Apart</td>\n",
       "      <td>2011</td>\n",
       "      <td>50 Cent</td>\n",
       "      <td>actor</td>\n",
       "      <td>Deon</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>Freelancers</td>\n",
       "      <td>2012</td>\n",
       "      <td>50 Cent</td>\n",
       "      <td>actor</td>\n",
       "      <td>Malo</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>Get Rich or Die Tryin'</td>\n",
       "      <td>2005</td>\n",
       "      <td>50 Cent</td>\n",
       "      <td>actor</td>\n",
       "      <td>Marcus</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>Gun</td>\n",
       "      <td>2010</td>\n",
       "      <td>50 Cent</td>\n",
       "      <td>actor</td>\n",
       "      <td>Rich</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3785795</th>\n",
       "      <td>120</td>\n",
       "      <td>2008</td>\n",
       "      <td>?zge ?zberk</td>\n",
       "      <td>actress</td>\n",
       "      <td>M?nire</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3785893</th>\n",
       "      <td>6A</td>\n",
       "      <td>2016</td>\n",
       "      <td>Emine ?zkan</td>\n",
       "      <td>actress</td>\n",
       "      <td>Denise</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3785961</th>\n",
       "      <td>Kadife</td>\n",
       "      <td>2012</td>\n",
       "      <td>Ayta? ?ztuna</td>\n",
       "      <td>actress</td>\n",
       "      <td>Kadife Ana</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786008</th>\n",
       "      <td>Dig og mig</td>\n",
       "      <td>2008</td>\n",
       "      <td>Julie R. ?lgaard</td>\n",
       "      <td>actress</td>\n",
       "      <td>Stephanie</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786011</th>\n",
       "      <td>Fortune Defies Death</td>\n",
       "      <td>2017</td>\n",
       "      <td>Julie R. ?lgaard</td>\n",
       "      <td>actress</td>\n",
       "      <td>Katharine</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>60568 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          title  year              name     type  \\\n",
       "102      Live Freaky Die Freaky  2006           Nick 13    actor   \n",
       "138       All Things Fall Apart  2011           50 Cent    actor   \n",
       "144                 Freelancers  2012           50 Cent    actor   \n",
       "145      Get Rich or Die Tryin'  2005           50 Cent    actor   \n",
       "146                         Gun  2010           50 Cent    actor   \n",
       "...                         ...   ...               ...      ...   \n",
       "3785795                     120  2008       ?zge ?zberk  actress   \n",
       "3785893                      6A  2016       Emine ?zkan  actress   \n",
       "3785961                  Kadife  2012      Ayta? ?ztuna  actress   \n",
       "3786008              Dig og mig  2008  Julie R. ?lgaard  actress   \n",
       "3786011    Fortune Defies Death  2017  Julie R. ?lgaard  actress   \n",
       "\n",
       "              character    n  \n",
       "102      TV Reporter #1  1.0  \n",
       "138                Deon  1.0  \n",
       "144                Malo  1.0  \n",
       "145              Marcus  1.0  \n",
       "146                Rich  1.0  \n",
       "...                 ...  ...  \n",
       "3785795          M?nire  1.0  \n",
       "3785893          Denise  1.0  \n",
       "3785961      Kadife Ana  1.0  \n",
       "3786008       Stephanie  1.0  \n",
       "3786011       Katharine  1.0  \n",
       "\n",
       "[60568 rows x 6 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lead_role_p = cast[(cast.year >= 2000) & (cast.n <= 1.0)]\n",
    "lead_role_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section II - Aggregations, Transformations and Visualizations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What are the top ten most common movie names of all time?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hamlet                  20\n",
       "Carmen                  17\n",
       "Macbeth                 16\n",
       "Temptation              12\n",
       "The Outsider            12\n",
       "Maya                    12\n",
       "Othello                 11\n",
       "Freedom                 11\n",
       "Honeymoon               11\n",
       "The Three Musketeers    11\n",
       "Name: title, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_ten = movies.title.value_counts()[:10]\n",
    "top_ten"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the top ten common movie names of all time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d2058a3dc0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "top_ten.plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q1:  Which years in the 2000s saw the most movies released? (Show top 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017    11474\n",
       "2016     9440\n",
       "2015     8702\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_year = movies[movies.year>=2000]\n",
    "\n",
    "ty = top_year.year.value_counts()[:3]\n",
    "ty"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q2: # Plot the total number of films released per-decade (1890, 1900, 1910,....)\n",
    "- Hint: Dividing the year and multiplying with a number might give you the decade the year falls into!\n",
    "- You might need to sort before plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year  title                                                                \n",
       "1890  Miss Jerry                                                               1\n",
       "      Reproduction of the Corbett and Jeffries Fight                           1\n",
       "      The Startled Lover                                                       1\n",
       "1900  Amleto                                                                   1\n",
       "      Andreas Hofer                                                            1\n",
       "      Assalto alla Banca Popolare di Fiume                                     1\n",
       "      Don Quijote                                                              1\n",
       "      El pastorcito de Torrente                                                1\n",
       "      Excelsior (II)                                                           1\n",
       "      Family Troubles (II)                                                     1\n",
       "      Faust                                                                    1\n",
       "      Gans-Nelson Fight                                                        1\n",
       "      Heroes of the Cross                                                      1\n",
       "      Highlights from The Mikado                                               1\n",
       "      Impersonation of Nelson-McGovern Fight                                   1\n",
       "      Ju-Jitsu                                                                 1\n",
       "      La Chicanera                                                             1\n",
       "      La malia dell'oro                                                        1\n",
       "      Lika mot lika                                                            1\n",
       "      Locura de amor                                                           1\n",
       "      May Day Parade                                                           1\n",
       "      O Nono Mandamento                                                        1\n",
       "      Os Guaranis                                                              1\n",
       "      Pega na Chaleira                                                         1\n",
       "      Pierrot's Problem, or How to Make a Fat Wife Out of Two Lean Ones        1\n",
       "      Robbery Under Arms                                                       1\n",
       "      Salome Mad                                                               1\n",
       "      Soldiers of the Cross                                                    1\n",
       "      Sonho de Valsa                                                           1\n",
       "      The Divorce                                                              1\n",
       "      The Fairylogue and Radio-Plays                                           1\n",
       "      The Joe Gans-Battling Nelson Fight                                       1\n",
       "      The Life of Moses                                                        1\n",
       "      The Scottish Covenanters                                                 1\n",
       "      The Story of the Kelly Gang                                              1\n",
       "      Trouble in Hogan's Alley                                                 1\n",
       "      Um Cavalheiro Deveras Obsequioso                                         1\n",
       "      Uma Licao de Maxixe                                                      1\n",
       "      Valsons                                                                  1\n",
       "      Violante                                                                 1\n",
       "      World's Heavyweight Championship Between Tommy Burns and Jack Johnson    1\n",
       "      Yamato zakura                                                            1\n",
       "1910  Amleto                                                                   3\n",
       "      Anna Karenina                                                            3\n",
       "      Hamlet                                                                   3\n",
       "      Home                                                                     3\n",
       "      Sapho                                                                    3\n",
       "      The Vicar of Wakefield                                                   3\n",
       "      Trilby                                                                   3\n",
       "      Vendetta                                                                 3\n",
       "Name: title, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#movies_grouping = movies.title.groupby(movies.year).value_counts()\n",
    "\n",
    "movies_grouping = movies.title.groupby((movies.year//10)*10).value_counts()\n",
    "\n",
    "movies_grouping.head(50)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q3: \n",
    "\n",
    "(A) What are the top 10 most common character names in movie history?\n",
    "\n",
    "(B) Who are the top 10 people most often credited as \"Herself\" in movie history?\n",
    "\n",
    "(C) Who are the top 10 people most often credited as \"Himself\" in movie history?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Himself        20746\n",
       "Dancer         12477\n",
       "Extra          11948\n",
       "Reporter        8434\n",
       "Student         7773\n",
       "Doctor          7669\n",
       "Party Guest     7245\n",
       "Policeman       7029\n",
       "Nurse           6999\n",
       "Bartender       6802\n",
       "Name: character, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast.character.value_counts().head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Queen Elizabeth II           12\n",
       "Mar?a Luisa (V) Mart?n        9\n",
       "Joyce Brothers                9\n",
       "Luisa Horga                   9\n",
       "Margaret Thatcher             8\n",
       "Hillary Clinton               8\n",
       "Marta Berrocal                6\n",
       "Sumie Sakai                   6\n",
       "Joan Rivers                   6\n",
       "Mar?a Isabel (III) Mart?n     6\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = cast[cast.character == 'Herself']\n",
    "c.name.value_counts().head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Adolf Hitler             99\n",
       "Richard Nixon            44\n",
       "Ronald Reagan            41\n",
       "John F. Kennedy          37\n",
       "George W. Bush           25\n",
       "Winston Churchill        24\n",
       "Martin Luther King       23\n",
       "Ron Jeremy               22\n",
       "Bill Clinton             22\n",
       "Franklin D. Roosevelt    21\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "c = cast[cast.character == 'Himself']\n",
    "c.name.value_counts().head(10)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q4: \n",
    "\n",
    "(A) What are the top 10 most frequent roles that start with the word \"Zombie\"?\n",
    "\n",
    "(B) What are the top 10 most frequent roles that start with the word \"Police\"?\n",
    "\n",
    "- Hint: The `startswith()` function might be useful"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Anthology of Horror 5</td>\n",
       "      <td>2017</td>\n",
       "      <td>Sergey A.</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>278</th>\n",
       "      <td>The Legion of Supervillains the Official Music...</td>\n",
       "      <td>2013</td>\n",
       "      <td>Four A.M.</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>Escaping the Dead</td>\n",
       "      <td>2017</td>\n",
       "      <td>Tobias Alring Aakast</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>930</th>\n",
       "      <td>Awaken the Dead</td>\n",
       "      <td>2007</td>\n",
       "      <td>Geovanny Abad</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>Zombi 3</td>\n",
       "      <td>1988</td>\n",
       "      <td>Rene Abadeza</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1425</th>\n",
       "      <td>My Valentine Girls</td>\n",
       "      <td>2011</td>\n",
       "      <td>Roger Abaya</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie (segment \"Gunaw\")</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1694</th>\n",
       "      <td>Zibahkhana</td>\n",
       "      <td>2007</td>\n",
       "      <td>Qaiser Abbas</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2510</th>\n",
       "      <td>Hsien of the Dead</td>\n",
       "      <td>2012</td>\n",
       "      <td>Fadhil Abdat</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2511</th>\n",
       "      <td>Hsien of the Dead</td>\n",
       "      <td>2012</td>\n",
       "      <td>Naif Abdat</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3629</th>\n",
       "      <td>Colin</td>\n",
       "      <td>2008</td>\n",
       "      <td>Bamshad Abedi-Amin</td>\n",
       "      <td>actor</td>\n",
       "      <td>Zombie Mugger - Hat</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  title  year  \\\n",
       "223                               Anthology of Horror 5  2017   \n",
       "278   The Legion of Supervillains the Official Music...  2013   \n",
       "380                                   Escaping the Dead  2017   \n",
       "930                                     Awaken the Dead  2007   \n",
       "979                                             Zombi 3  1988   \n",
       "1425                                 My Valentine Girls  2011   \n",
       "1694                                         Zibahkhana  2007   \n",
       "2510                                  Hsien of the Dead  2012   \n",
       "2511                                  Hsien of the Dead  2012   \n",
       "3629                                              Colin  2008   \n",
       "\n",
       "                      name   type                 character     n  \n",
       "223              Sergey A.  actor                    Zombie   NaN  \n",
       "278              Four A.M.  actor                    Zombie   NaN  \n",
       "380   Tobias Alring Aakast  actor                    Zombie   NaN  \n",
       "930          Geovanny Abad  actor                    Zombie  89.0  \n",
       "979           Rene Abadeza  actor                    Zombie   NaN  \n",
       "1425           Roger Abaya  actor  Zombie (segment \"Gunaw\")  35.0  \n",
       "1694          Qaiser Abbas  actor                    Zombie  32.0  \n",
       "2510          Fadhil Abdat  actor                    Zombie   NaN  \n",
       "2511            Naif Abdat  actor                    Zombie   NaN  \n",
       "3629    Bamshad Abedi-Amin  actor       Zombie Mugger - Hat  24.0  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cast.character.startswith('Zombie')\n",
    "\n",
    "cast[cast.character.str.contains('Zombie')].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>Noi duri</td>\n",
       "      <td>1960</td>\n",
       "      <td>5 Asternovas</td>\n",
       "      <td>actor</td>\n",
       "      <td>Police Officers disguised as Musicians</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>Gandhi</td>\n",
       "      <td>1982</td>\n",
       "      <td>Aadil</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman at Chauri Chaura</td>\n",
       "      <td>104.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>517</th>\n",
       "      <td>Zinda Bhaag</td>\n",
       "      <td>2013</td>\n",
       "      <td>Sadiq Aamir</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman 1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>553</th>\n",
       "      <td>The Craic</td>\n",
       "      <td>1999</td>\n",
       "      <td>Peter Aanensen</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>630</th>\n",
       "      <td>Mr. Reliable</td>\n",
       "      <td>1996</td>\n",
       "      <td>Aash Aaron</td>\n",
       "      <td>actor</td>\n",
       "      <td>Police Marksman 2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>948</th>\n",
       "      <td>Babae sa breakwater</td>\n",
       "      <td>2003</td>\n",
       "      <td>Ricardo Abad</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>Babae sa breakwater</td>\n",
       "      <td>2003</td>\n",
       "      <td>Dante Abadeza</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>Catch Me If You Can</td>\n",
       "      <td>2002</td>\n",
       "      <td>Frank Abagnale Jr.</td>\n",
       "      <td>actor</td>\n",
       "      <td>French Policeman</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1090</th>\n",
       "      <td>Mahal kita, alam mo ba?</td>\n",
       "      <td>1996</td>\n",
       "      <td>Jing Abalos</td>\n",
       "      <td>actor</td>\n",
       "      <td>Police</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1142</th>\n",
       "      <td>Anghel dela guardia</td>\n",
       "      <td>2000</td>\n",
       "      <td>Erning Abarca</td>\n",
       "      <td>actor</td>\n",
       "      <td>Policeman</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        title  year                name   type  \\\n",
       "134                  Noi duri  1960        5 Asternovas  actor   \n",
       "343                    Gandhi  1982               Aadil  actor   \n",
       "517               Zinda Bhaag  2013         Sadiq Aamir  actor   \n",
       "553                 The Craic  1999      Peter Aanensen  actor   \n",
       "630              Mr. Reliable  1996          Aash Aaron  actor   \n",
       "948       Babae sa breakwater  2003        Ricardo Abad  actor   \n",
       "969       Babae sa breakwater  2003       Dante Abadeza  actor   \n",
       "1036      Catch Me If You Can  2002  Frank Abagnale Jr.  actor   \n",
       "1090  Mahal kita, alam mo ba?  1996         Jing Abalos  actor   \n",
       "1142      Anghel dela guardia  2000       Erning Abarca  actor   \n",
       "\n",
       "                                   character      n  \n",
       "134   Police Officers disguised as Musicians   11.0  \n",
       "343               Policeman at Chauri Chaura  104.0  \n",
       "517                              Policeman 1    NaN  \n",
       "553                                Policeman   24.0  \n",
       "630                        Police Marksman 2    NaN  \n",
       "948                                Policeman   83.0  \n",
       "969                                Policeman   82.0  \n",
       "1036                        French Policeman   88.0  \n",
       "1090                                  Police   23.0  \n",
       "1142                               Policeman   35.0  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast[cast.character.str.contains('Police')].head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q5: Plot how many roles 'Keanu Reeves' has played in each year of his career."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d2008f11f0>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cast[cast.name == 'Keanu Reeves'].groupby(['year']).size().plot(kind = 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q6: Plot the cast positions (n-values) of Keanu Reeve's roles through his career over the years.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d203068400>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cast[cast.name == 'Keanu Reeves'].groupby(['year', 'n']).size().plot(kind = 'bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q7: Plot the number of \"Hamlet\" films made by each decade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year\n",
       "1910.0     4\n",
       "1920.0     7\n",
       "1930.0     2\n",
       "1940.0     4\n",
       "1950.0     6\n",
       "1960.0     7\n",
       "1970.0     3\n",
       "1980.0     3\n",
       "1990.0     5\n",
       "2000.0    12\n",
       "2010.0    27\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast_hamlet = cast[cast.title.str.contains('Hamlet')]\n",
    "\n",
    "cast_hamlet.groupby((movies['year']//10)*10).size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q8: \n",
    "\n",
    "(A) How many leading roles were available to both actors and actresses, in the 1960s (1960-1969)?\n",
    "\n",
    "(B) How many leading roles were available to both actors and actresses, in the 2000s (2000-2009)?\n",
    "\n",
    "- Hint: A specific value of n might indicate a leading role"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11823"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(cast[(cast.year>= 1960) & (cast.year< 1970) & (cast.n<2)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26344"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(cast[(cast.year>= 2000) & (cast.year< 2010) & (cast.n<2)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q9: List, in order by year, each of the films in which Frank Oz has played more than 1 role."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "title\n",
       "An American Werewolf in London          2\n",
       "Follow That Bird                        3\n",
       "Muppet Treasure Island                  4\n",
       "Muppets from Space                      4\n",
       "The Adventures of Elmo in Grouchland    3\n",
       "The Dark Crystal                        2\n",
       "The Great Muppet Caper                  6\n",
       "The Muppet Christmas Carol              7\n",
       "The Muppet Movie                        8\n",
       "The Muppets Take Manhattan              7\n",
       "Name: character, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast_frankOz = cast[cast.name == 'Frank Oz'].character.groupby(cast.title).size()#groupby(cast.title).size()\n",
    "#cast_frankOz['character'].groupby(cast.title).size()\n",
    "\n",
    "cast_frankOz[cast_frankOz >1]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section II - Q10: List each of the characters that Frank Oz has portrayed at least twice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "character\n",
       "Animal            6\n",
       "Bert              3\n",
       "Cookie Monster    5\n",
       "Fozzie Bear       4\n",
       "Grover            2\n",
       "Miss Piggy        6\n",
       "Sam the Eagle     5\n",
       "Yoda              6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cast_frankOz = cast[cast.name == 'Frank Oz'].groupby(cast.character).size()\n",
    "cast_frankOz[cast_frankOz> 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Section III - Advanced Merging, Querying and Visualizations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make a bar plot with the following conditions\n",
    "- Frequency of the number of movies with \"Christmas\" in their title \n",
    "- Movies should be such that they are released in the USA.\n",
    "- Show the frequency plot by month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d20762f640>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "christmas = release_dates[(release_dates.title.str.contains('Christmas')) & (release_dates.country == 'USA')]\n",
    "christmas.date.dt.month.value_counts().sort_index().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section III - Q1: Make a bar plot with the following conditions\n",
    "- Frequency of the number of movies with \"Summer\" in their title \n",
    "- Movies should be such that they are released in the USA.\n",
    "- Show the frequency plot by month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d2000d0a60>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#summer = release_dates[release_dates.title.str.contains('Summer', case = False)].groupby(['title','country']).size()\n",
    "#freq = summer[summer.country == 'USA'].groupby('title').resample('M')\n",
    "\n",
    "release_dates['month'] = release_dates.date.dt.month\n",
    "\n",
    "summer = release_dates[(release_dates.title.str.contains('Summer', case = False)) | (release_dates.country == 'USA')].groupby('month').size().plot(kind = 'bar')\n",
    "\n",
    "#summer = release_dates[release_dates.title.str.contains('Summer', case = False)].groupby('title').resampsle('M')\n",
    "\n",
    "#df_Keanu = cast[cast.name.str.contains('Keanu Reeves', case = False)]\n",
    "#freq.groupby('title').size().plot()\n",
    "\n",
    "summer\n",
    "\n",
    "#release_dates.year.groupby(release_dates.country == 'USA').resample(\"M\").size()\n",
    "\n",
    "#summer.resample(\"M\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section III - Q2: Make a bar plot with the following conditions\n",
    "- Frequency of the number of movies with \"Action\" in their title \n",
    "- Movies should be such that they are released in the USA.\n",
    "- Show the frequency plot by week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d2102cbb80>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#release_dates['date'] = release_dates['date'].astype('datetime64[ns]')\n",
    "#weekly_data = release_dates.groupby(\"title\").resample('W', on='date').size()#.sort_values(by='date')\n",
    "\n",
    "release_dates['week'] = release_dates.date.dt.week\n",
    "\n",
    "week = release_dates[(release_dates.title.str.contains('Action  ', case = False)) | (release_dates.country == 'USA')].groupby('week').size().sort_index()\n",
    "\n",
    "\n",
    "week.plot(kind = 'bar')\n",
    "\n",
    "\n",
    "#release_dates.date.dt.week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section III - Q3: Show all the movies in which Keanu Reeves has played the lead role along with their   release date in the USA sorted by the date of release\n",
    "- Hint: You might need to join or merge two datasets!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "      <th>country</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>2016-05-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>2016-10-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Buffy #1</td>\n",
       "      <td>actor</td>\n",
       "      <td>Buffy 4</td>\n",
       "      <td>31.0</td>\n",
       "      <td>France</td>\n",
       "      <td>2017-12-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Aaron Abrams</td>\n",
       "      <td>actor</td>\n",
       "      <td>Peter Madly</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>2016-05-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Closet Monster</td>\n",
       "      <td>2015</td>\n",
       "      <td>Aaron Abrams</td>\n",
       "      <td>actor</td>\n",
       "      <td>Peter Madly</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>2016-10-06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            title  year          name   type    character     n  country  \\\n",
       "0  Closet Monster  2015      Buffy #1  actor      Buffy 4  31.0   Taiwan   \n",
       "1  Closet Monster  2015      Buffy #1  actor      Buffy 4  31.0  Germany   \n",
       "2  Closet Monster  2015      Buffy #1  actor      Buffy 4  31.0   France   \n",
       "3  Closet Monster  2015  Aaron Abrams  actor  Peter Madly   1.0   Taiwan   \n",
       "4  Closet Monster  2015  Aaron Abrams  actor  Peter Madly   1.0  Germany   \n",
       "\n",
       "        date  \n",
       "0 2016-05-27  \n",
       "1 2016-10-06  \n",
       "2 2017-12-13  \n",
       "3 2016-05-27  \n",
       "4 2016-10-06  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rd_cast = pd.merge(cast, release_dates, on = ['title','year'], how = 'outer')\n",
    "rd_cast.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "      <th>character</th>\n",
       "      <th>n</th>\n",
       "      <th>country</th>\n",
       "      <th>date</th>\n",
       "      <th>Day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13816289</th>\n",
       "      <td>Chain Reaction</td>\n",
       "      <td>1996</td>\n",
       "      <td>Keanu Reeves</td>\n",
       "      <td>actor</td>\n",
       "      <td>Eddie Kasalivich</td>\n",
       "      <td>1.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>1996-08-02</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15715353</th>\n",
       "      <td>Knock Knock</td>\n",
       "      <td>2015</td>\n",
       "      <td>Keanu Reeves</td>\n",
       "      <td>actor</td>\n",
       "      <td>Evan</td>\n",
       "      <td>1.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>2015-10-09</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13996856</th>\n",
       "      <td>John Wick: Chapter 2</td>\n",
       "      <td>2017</td>\n",
       "      <td>Keanu Reeves</td>\n",
       "      <td>actor</td>\n",
       "      <td>John Wick</td>\n",
       "      <td>1.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>2017-02-10</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8884681</th>\n",
       "      <td>Speed</td>\n",
       "      <td>1994</td>\n",
       "      <td>Keanu Reeves</td>\n",
       "      <td>actor</td>\n",
       "      <td>Jack Traven</td>\n",
       "      <td>1.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>1994-06-10</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31359</th>\n",
       "      <td>The Replacements</td>\n",
       "      <td>2000</td>\n",
       "      <td>Keanu Reeves</td>\n",
       "      <td>actor</td>\n",
       "      <td>Shane Falco</td>\n",
       "      <td>1.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>2000-08-11</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         title  year          name   type         character  \\\n",
       "13816289        Chain Reaction  1996  Keanu Reeves  actor  Eddie Kasalivich   \n",
       "15715353           Knock Knock  2015  Keanu Reeves  actor              Evan   \n",
       "13996856  John Wick: Chapter 2  2017  Keanu Reeves  actor         John Wick   \n",
       "8884681                  Speed  1994  Keanu Reeves  actor       Jack Traven   \n",
       "31359         The Replacements  2000  Keanu Reeves  actor       Shane Falco   \n",
       "\n",
       "            n country       date   Day  \n",
       "13816289  1.0     USA 1996-08-02   2.0  \n",
       "15715353  1.0     USA 2015-10-09   9.0  \n",
       "13996856  1.0     USA 2017-02-10  10.0  \n",
       "8884681   1.0     USA 1994-06-10  10.0  \n",
       "31359     1.0     USA 2000-08-11  11.0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rd_cast['Day'] = rd_cast.date.dt.day\n",
    "rd_cast\n",
    "\n",
    "\n",
    "rd_cast = rd_cast[(rd_cast.name == 'Keanu Reeves') & (rd_cast.n == 1.0)]#.groupby(release_dates.date.dt.w\n",
    "out = rd_cast[rd_cast.country == 'USA'].sort_values('Day', ascending = True)\n",
    "out.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section III - Q4: Make a bar plot showing the months in which movies with Keanu Reeves tend to be released in the USA?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d2800f08b0>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rd_cast['month'] = rd_cast.date.dt.month\n",
    "\n",
    "\n",
    "\n",
    "rd_cast[(rd_cast.name == 'Keanu Reeves') & (rd_cast.country == 'USA') ].groupby('month').size().plot(kind = 'bar')\n",
    "#out = rd_cast[rd_cast.country == 'USA'].sort_values('Day', ascending = True\n",
    "#out.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Section III - Q5: Make a bar plot showing the years in which movies with Ian McKellen tend to be released in the USA?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1d28ca7ed00>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rd_cast['year'] = rd_cast.date.dt.year\n",
    "\n",
    "\n",
    "\n",
    "rd_cast[(rd_cast.name == 'Ian McKellen') & (rd_cast.country == 'USA') ].groupby('year').size().plot(kind = 'bar')\n",
    "\n",
    "#out = rd_cast[rd_cast.country == 'USA'].sort_values('Day', ascending = True\n",
    "#out.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
